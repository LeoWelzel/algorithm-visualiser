{"version":3,"sources":["sorting/algorithmEnum.ts","common/Text.tsx","components/Grid.tsx","PageTextPadding.tsx","sorting/heapsort.ts","sorting/mergesort.ts","sorting/quicksort.ts","sorting/routes.ts","common/FlexContainer.tsx","common/Column.tsx","common/Row.tsx","common/Spacer.tsx","common/useComponentSize.ts","common/useWindowSize.ts","components/Card.tsx","common/Canvas.tsx","common/useCanvas.ts","sorting/SortingCanvas.tsx","sorting/DemoCard.tsx","util/randomArray.ts","util/shuffle.ts","CardPage.tsx","AboutPage.tsx","components/Anchor.tsx","routes.ts","components/Footer.tsx","components/Header.tsx","DefaultPage.tsx","components/SelectionPanel.tsx","sorting/SortAlgoPageTemplate.tsx","sorting/SortHomePage.tsx","sorting/SortPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SortingAlgorithmEnum","Text","props","className","classNamePrefix","padBottom","style","children","Title","Subtitle","Body","Grid","PageTextPadding","top","bottom","heapsort","array","arrayCopy","arrayStates","helperHeapsort","length","left","right","i","Math","floor","heapify","push","largest","mergesort","helperMergesort","mid","merge","leftIndex","rightIndex","swapElement","quicksort","helperQuicksort","pivot","partition","j","SortingRoutes","getSortingAlgorithmName","algorithmEnum","Quicksort","Mergesort","Heapsort","getSortingAlgorithmPath","getSortingAlgorithm","FlexContainer","baseStyle","display","flexDirection","undefined","Column","Row","Spacer","flex","useComponentSize","ref","windowSize","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","height","setHeight","width","setWidth","useEffect","current","clientHeight","clientWidth","Card","Canvas","canvasRef","draw","background","useRef","animationFrameId","canvas","context","getContext","frameCount","render","fillStyle","fillRect","requestAnimationFrame","cancelAnimationFrame","useCanvas","drawFunction","SortingCanvas","computeDimension","given","max","min","maxWidth","minWidth","maxHeight","minHeight","fillColour","drawingHeight","drawingHeightProportion","startingY","drawingWidth","drawingWidthProportion","stripWidth","barWidth","barProportion","startingX","x","xCoord","DemoCard","history","useHistory","containerRef","defaultRunning","running","setRunning","stateIndex","setStateIndex","sortingStates","algorithm","resetHooks","useCallback","id","setInterval","nextIndex","setTimeout","resetInterval","interval","clearInterval","onMouseEnter","onClick","path","title","randomArray","arr","currentIndex","randomIndex","random","shuffleArray","CardPage","arrayLength","whiteSpace","body","AboutPage","Anchor","color","action","route","Routes","Footer","HomeRoute","AboutRoute","Copyright","marginTop","marginBottom","Header","DefaultPage","SelectionPanel","options","keys","members","value","selectedIndex","text","SortAlgoPageTemplate","defaultSortingComplete","defaultSortingStates","useMemo","sortingComplete","setSortingComplete","sortingStateIndex","setSortingStateIndex","setSortingStates","NumAlgorithms","sort","result","sortingAlgorithm","newIndex","setArray","resetArray","SortHomePage","SortPage","exact","App","pageBodyRef","sizeProps","sortProps","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc1ae021.chunk.js","sourcesContent":["import { heapsort } from \"./heapsort\";\r\nimport { mergesort } from \"./mergesort\";\r\nimport { quicksort } from \"./quicksort\";\r\nimport { SortingRoutes } from \"./routes\";\r\n\r\nexport enum SortingAlgorithmEnum {\r\n  Quicksort,\r\n  Mergesort,\r\n  Heapsort,\r\n  NumAlgorithms\r\n}\r\n\r\nexport const getSortingAlgorithmName = (algorithmEnum: SortingAlgorithmEnum) =>\r\n  algorithmEnum === SortingAlgorithmEnum.Quicksort ? 'Quicksort' :\r\n  algorithmEnum === SortingAlgorithmEnum.Mergesort ? 'Mergesort' :\r\n  algorithmEnum === SortingAlgorithmEnum.Heapsort ? 'Heapsort' : '';\r\n\r\nexport const getSortingAlgorithmDescription = (algorithmEnum: SortingAlgorithmEnum) =>\r\n  algorithmEnum === SortingAlgorithmEnum.Quicksort ?\r\n    'Quicksort is a divide-and-conquer algorithm that recursively selects a pivot element ' +\r\n    'and ordering the rest of the sequence such that all elements to the pivot\\'s left are smaller than it, ' +\r\n    'whilst those to the pivot\\'s right are larger than it.' :\r\n  algorithmEnum === SortingAlgorithmEnum.Mergesort ?\r\n    'Mergesort is a divide-and-conquer algorithm that recursively bisects the sequence until the result of such a bisection ' +\r\n    'produces two ordered subsequences, typically when at least one is a singleton, at which point it merges the two.' :\r\n  algorithmEnum === SortingAlgorithmEnum.Heapsort ?\r\n    'Heapsort constructs a heap from the sequence - in this case a binary heap - and builds the sorted sequence ' +\r\n    'by repeatedly removing the heap\\'s root and updating the heap to maintain the heap property.' :\r\n    '';\r\n\r\nexport const getSortingAlgorithmPath = (algorithmEnum: SortingAlgorithmEnum) =>\r\n  algorithmEnum === SortingAlgorithmEnum.Quicksort ? SortingRoutes.quicksort :\r\n  algorithmEnum === SortingAlgorithmEnum.Mergesort ? SortingRoutes.mergesort :\r\n  algorithmEnum === SortingAlgorithmEnum.Heapsort ? SortingRoutes.heapsort : '';\r\n\r\nexport const getSortingAlgorithm = (algorithmEnum: SortingAlgorithmEnum) =>\r\n  algorithmEnum === SortingAlgorithmEnum.Quicksort ? quicksort :\r\n  algorithmEnum === SortingAlgorithmEnum.Mergesort ? mergesort : heapsort\r\n\r\nexport const getSortingAlgorithmColour = (algorithmEnum: SortingAlgorithmEnum) =>\r\n  algorithmEnum === SortingAlgorithmEnum.Quicksort ? '#0000ff' :\r\n  algorithmEnum === SortingAlgorithmEnum.Mergesort ? '#00ffcc' : '#ccff00'\r\n","import React from 'react'\r\nimport { BasicProps, HasChildren } from './basicProps'\r\n\r\nimport '../styles/Text.scss'\r\n\r\ninterface TextProps extends BasicProps, HasChildren {\r\n  padBottom?: boolean;\r\n}\r\n\r\nconst Text = (props: TextProps & { classNamePrefix: string }) => {\r\n  const className = `${ props.classNamePrefix } ` +\r\n    (props.padBottom ?? 'text-pad-small-bottom ') +\r\n    props.className ?? '';\r\n\r\n  return (\r\n    <div\r\n      className={ className }\r\n      style={ props.style }\r\n    >\r\n      { props.children }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const Title = (props: TextProps) =>\r\n  <Text { ...props } classNamePrefix='text-large3'>\r\n    { props.children } \r\n  </Text>\r\n\r\nexport const Subtitle = (props: TextProps) =>\r\n  <Text { ...props } classNamePrefix='text-large'>\r\n    { props.children }\r\n  </Text>\r\n\r\nexport const Body = (props: TextProps) =>\r\n  <Text { ...props } classNamePrefix=''>\r\n    { props.children } \r\n  </Text>","import React from 'react'\r\nimport { BasicProps, HasChildren } from '../common/basicProps'\r\n\r\nimport './Grid.scss'\r\n\r\ninterface GridProps extends BasicProps, HasChildren {}\r\n\r\nexport const Grid = (props: GridProps) => {\r\n  return (\r\n    <div\r\n      className={ 'grid ' + props.className ?? '' }\r\n      style={ props.style }\r\n    >\r\n      { props.children }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { BasicProps, HasChildren } from './common/basicProps'\r\n\r\nimport './App.scss';\r\n\r\ninterface PageTextPaddingProps extends BasicProps, HasChildren {\r\n  top?: boolean;\r\n  bottom?: boolean;\r\n}\r\n\r\nexport const PageTextPadding = (props: PageTextPaddingProps) => {\r\n  const top = (props.top !== false);\r\n  const bottom = (props.bottom !== false);\r\n\r\n  const className = (top ? 'page-body-text-padding-top ' : '') +\r\n                    (bottom ? 'page-body-text-padding-bottom ' : '') +\r\n                    'page-body-text-padding-sides ' + props.className ?? '';\r\n\r\n  return (\r\n    <div className={ className } style={ props.style }>\r\n      { props.children }\r\n    </div>\r\n  )\r\n}\r\n","import { SortingAlgorithm, SortingType } from './sort';\r\n\r\n/**\r\n * Performs the heapsort algorithm on an input.\r\n * @param array The array to perform heapsort on.\r\n * @returns A list of states the array transitioned through.\r\n */\r\nexport const heapsort: SortingAlgorithm = (array: SortingType[]) => {\r\n  const arrayCopy = [...array];\r\n  const arrayStates: SortingType[][] = [];\r\n\r\n  helperHeapsort(arrayStates, arrayCopy, 0, arrayCopy.length);\r\n\r\n  return arrayStates;\r\n}\r\n\r\n/**\r\n * Performs the heapsort algorithm on an input.\r\n * @param arrayStates The stored array of states the array has gone through. States are pushed to this.\r\n * @param array The array to perform heapsort on.\r\n * @param left The leftmost pointer.\r\n * @param right The rightmost pointer.\r\n */\r\nconst helperHeapsort = (arrayStates: SortingType[][], array: SortingType[], left: number, right: number) => {\r\n  for (let i = Math.floor(array.length / 2) - 1; i >= 0; i--)\r\n    heapify(arrayStates, array, array.length, i);\r\n\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    [array[i], array[0]] = [array[0], array[i]];\r\n    arrayStates.push([...array]);\r\n    heapify(arrayStates, array, i, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * Heapifies the array.\r\n */\r\nconst heapify = (arrayStates: SortingType[][], array: SortingType[], length: number, i: number) => {\r\n  let largest = i,\r\n    left = 2 * i + 1,\r\n    right = 2 * i + 2;\r\n\r\n  if (left < length && array[largest] < array[left])\r\n    largest = left;\r\n\r\n  if (right < length && array[largest] < array[right])\r\n    largest = right;\r\n\r\n  if (largest !== i) {\r\n    [array[i], array[largest]] = [array[largest], array[i]];\r\n    arrayStates.push([...array]);\r\n    heapify(arrayStates, array, length, largest);\r\n  }\r\n}\r\n","import { SortingAlgorithm, SortingType } from './sort';\r\n\r\n/**\r\n * Performs the mergesort algorithm on an input.\r\n * @param array The array to perform mergesort on.\r\n * @returns A list of states the array transitioned through.\r\n */\r\nexport const mergesort: SortingAlgorithm = (array: SortingType[]) => {\r\n  const arrayCopy = [...array];\r\n  const arrayStates: SortingType[][] = [];\r\n\r\n  helperMergesort(arrayStates, arrayCopy, 0, arrayCopy.length);\r\n\r\n  return arrayStates;\r\n}\r\n\r\n/**\r\n * Performs the mergesort algorithm on an input.\r\n * @param arrayStates The stored array of states the array has gone through. States are pushed to this.\r\n * @param array The array to perform mergesort on.\r\n * @param left The leftmost pointer.\r\n * @param right The rightmost pointer.\r\n */\r\nconst helperMergesort = (arrayStates: SortingType[][], array: SortingType[], left: number, right: number) => {\r\n  if (left + 1 < right) {\r\n    let mid = Math.floor((left + right) / 2);\r\n\r\n    helperMergesort(arrayStates, array, left, mid);\r\n    helperMergesort(arrayStates, array, mid, right);\r\n    merge(arrayStates, array, left, right, mid);\r\n  }\r\n}\r\n\r\n/**\r\n * Merges the sorted lists on either side of the partition.\r\n * @param arrayStates The stored array of states the array has gone through. States are pushed to this.\r\n * @param array The array to partition.\r\n * @param left The leftmost pointer.\r\n * @param right The rightmost pointer.\r\n * @param mid The pointer to the middle of the array.\r\n */\r\nconst merge = (arrayStates: SortingType[][], array: SortingType[], left: number, right: number, mid: number) => {\r\n  let leftIndex = left,\r\n    rightIndex = mid;\r\n\r\n  while (leftIndex < rightIndex && rightIndex < right) {\r\n    if (array[leftIndex] >= array[rightIndex]) {\r\n      const swapElement = array[rightIndex];\r\n\r\n      for (let i = rightIndex; i > leftIndex; i--)\r\n        array[i] = array[i - 1];\r\n\r\n      array[leftIndex] = swapElement;\r\n      rightIndex++;\r\n\r\n      arrayStates.push([...array]);\r\n    }\r\n    leftIndex++;\r\n  }\r\n}\r\n","import { SortingAlgorithm, SortingType } from './sort';\r\n\r\n/**\r\n * Performs the quicksort algorithm on an input.\r\n * @param array The array to perform quicksort on.\r\n * @returns A list of states the array transitioned through.\r\n */\r\nexport const quicksort: SortingAlgorithm = (array: SortingType[]) => {\r\n  const arrayCopy = [...array];\r\n  const arrayStates: SortingType[][] = [];\r\n\r\n  helperQuicksort(arrayStates, arrayCopy, 0, arrayCopy.length);\r\n\r\n  return arrayStates;\r\n}\r\n\r\n/**\r\n * A helper quicksort function that sorts the array and outputs its states.\r\n * @param arrayStates The stored array of states the array has gone through. States are pushed to this.\r\n * @param array The array to perform quicksort on.\r\n * @param left The leftmost pointer.\r\n * @param right The rightmost pointer.\r\n */\r\nconst helperQuicksort = (arrayStates: SortingType[][], array: SortingType[], left: number, right: number) => {\r\n  if (left < right) {\r\n    const pivot = partition(arrayStates, array, left, right);\r\n    helperQuicksort(arrayStates, array, left, pivot);\r\n    helperQuicksort(arrayStates, array, pivot + 1, right);\r\n  }\r\n}\r\n\r\n/**\r\n * Partitions the input array.\r\n * @param arrayStates The stored array of states the array has gone through. States are pushed to this.\r\n * @param array The array to partition.\r\n * @param left The leftmost pointer.\r\n * @param right The rightmost pointer.\r\n * @returns The index of the array pivot.\r\n */\r\nconst partition = (arrayStates: SortingType[][], array: SortingType[], left: number, right: number): number => {\r\n  const pivot = array[left];\r\n\r\n  let i = left + 1,\r\n    j = right;\r\n\r\n  while (i < j)\r\n    if (array[i] < pivot)\r\n      ++i;\r\n    else {\r\n      if (i !== j - 1) {\r\n        [array[i], array[j - 1]] = [array[j - 1], array[i]];\r\n        arrayStates.push([...array]);\r\n      }\r\n      j--;\r\n    }\r\n\r\n  if (left !== i - 1) {\r\n    /* Swap these two values. */\r\n    [array[left], array[i - 1]] = [array[i - 1], array[left]];\r\n    arrayStates.push([...array]);\r\n  }\r\n\r\n  return i - 1;\r\n}\r\n","export const SortingRoutes = {\r\n  heapsort: '/heapsort',\r\n  mergesort: '/mergesort',\r\n  quicksort: '/quicksort'\r\n}\r\n","import React from 'react'\r\nimport { BasicProps, HasChildren } from './basicProps';\r\n\r\nexport interface FlexContainerProps extends BasicProps, HasChildren {}\r\n\r\ninterface FlexContainerDirection {\r\n  flexDirection: 'row' | 'column';\r\n}\r\n\r\nexport const FlexContainer = (props: FlexContainerProps & FlexContainerDirection) => {\r\n  const baseStyle: React.CSSProperties = {\r\n    display: 'flex',\r\n    flexDirection: props.flexDirection\r\n  };\r\n\r\n  const style = props.style === undefined ? baseStyle: { ...baseStyle, ...props.style };\r\n\r\n  return (\r\n    <div className={ props.className } style={ style }>\r\n      { props.children }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { FlexContainer, FlexContainerProps } from './FlexContainer';\r\n\r\nexport const Column = (props: FlexContainerProps) =>\r\n  <FlexContainer\r\n    { ...props }\r\n    flexDirection='column'\r\n  />\r\n","import React from 'react';\r\nimport { FlexContainer, FlexContainerProps } from './FlexContainer';\r\n\r\nexport const Row = (props: FlexContainerProps) =>\r\n  <FlexContainer\r\n    { ...props }\r\n    flexDirection='row'\r\n  />\r\n","import React from 'react'\r\nimport { BasicProps, HasChildren } from './basicProps'\r\n\r\ninterface SpacerProps extends BasicProps, HasChildren {\r\n  flex?: number;\r\n}\r\n\r\nexport const Spacer = (props: SpacerProps) =>\r\n  <div className={ props.className } style={{ flex: props.flex ?? 1, ...props.style }}>\r\n    { props.children }\r\n  </div>\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useWindowSize } from './useWindowSize';\r\n\r\nexport const useComponentSize = (ref: React.RefObject<HTMLDivElement>) => {\r\n  const windowSize = useWindowSize();\r\n  const [height, setHeight] = useState(0);\r\n  const [width, setWidth] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const height = ref.current?.clientHeight;\r\n    const width = ref.current?.clientWidth;\r\n\r\n    if (height)\r\n      setHeight(height);\r\n    if (width)\r\n      setWidth(width);\r\n  }, [windowSize, ref])\r\n\r\n  return { width, height };\r\n}","import { useLayoutEffect, useState } from \"react\";\r\n\r\nexport const useWindowSize = () => {\r\n  const [size, setSize] = useState([0, 0]);\r\n\r\n  useLayoutEffect(() => {\r\n    const updateSize = () => setSize([window.innerWidth, window.innerHeight]);\r\n\r\n    window.addEventListener('resize', updateSize);\r\n    updateSize();\r\n\r\n    return () => window.removeEventListener('resize', updateSize);\r\n  }, []);\r\n\r\n  return size;\r\n}\r\n","import React from 'react'\r\nimport { BasicProps, HasChildren } from '../common/basicProps'\r\nimport { Column } from '../common/Column'\r\nimport { Row } from '../common/Row'\r\nimport { Spacer } from '../common/Spacer'\r\n\r\nimport './Card.scss'\r\n\r\ninterface CardProps extends BasicProps, HasChildren {  }\r\n\r\nexport const Card = (props: CardProps) => {\r\n  const className = 'card-container ' + props.className ?? '';\r\n\r\n  return (\r\n    <div\r\n      className={ className }\r\n      style={ props.style }\r\n    >\r\n      <Column>\r\n        <Spacer/>\r\n        <Row>\r\n          <Spacer/>  \r\n          { props.children }\r\n          <Spacer/>  \r\n        </Row>\r\n        <Spacer/>\r\n      </Column>\r\n    </div>\r\n  )\r\n}\r\n","import { HasSize } from './hasSize';\r\nimport { DrawFunction, useCanvas } from './useCanvas';\r\n\r\ninterface CanvasProps extends HasSize {\r\n  drawFunction: DrawFunction;\r\n  background: string;\r\n}\r\n\r\nexport const Canvas = (props: CanvasProps) => {\r\n  const canvasRef = useCanvas(props.drawFunction, props.background);\r\n\r\n  return (\r\n    <canvas\r\n      ref={ canvasRef }\r\n      width={ props.width }\r\n      height={ props.height }\r\n    >\r\n    </canvas>\r\n  )\r\n}\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport type DrawFunction = (context: CanvasRenderingContext2D, frameCount: number) => void;\r\n\r\nexport const useCanvas = (draw: DrawFunction, background: string) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  \r\n  useEffect(() => {\r\n    \r\n    const canvas = canvasRef.current;\r\n    const context = canvas?.getContext('2d');\r\n\r\n    let frameCount = 0;\r\n    let animationFrameId: number;\r\n    \r\n    const render = () => {\r\n      frameCount++;\r\n\r\n      if (context) {\r\n        context.fillStyle = background;\r\n        context.fillRect(0, 0, context.canvas.width, context.canvas.height)\r\n\r\n        draw(context, frameCount);\r\n      }\r\n\r\n      animationFrameId = window.requestAnimationFrame(render);\r\n    }\r\n    render();\r\n  \r\n    return () => {\r\n      window.cancelAnimationFrame(animationFrameId);\r\n    }\r\n  }, [draw, background]);\r\n  \r\n  return canvasRef;\r\n}","import React from 'react'\r\nimport { Canvas } from '../common/Canvas'\r\nimport { HasSize, HasSizeRange } from '../common/hasSize';\r\nimport { SortingType } from './sort';\r\n\r\ninterface SortingCanvasProps extends HasSize, HasSizeRange {\r\n  drawingWidthProportion: number;\r\n  drawingHeightProportion: number;\r\n  barProportion: number;\r\n  array: SortingType[];\r\n\r\n  fillColour?: string;\r\n  background?: string;\r\n}\r\n\r\nexport const SortingCanvas = (props: SortingCanvasProps) => {\r\n  const computeDimension = (given: number, max: number | undefined, min: number | undefined) => {\r\n    if (max !== undefined && given > max)\r\n      return max;\r\n    else if (min !== undefined && given < min)\r\n      return min;\r\n    else\r\n      return given;\r\n  }\r\n\r\n  const width = computeDimension(props.width, props.maxWidth, props.minWidth);\r\n  const height = computeDimension(props.height, props.maxHeight, props.minHeight);\r\n\r\n  const fillColour = props.fillColour ?? '#29a0f0';\r\n\r\n  const length = props.array.length;\r\n\r\n  const drawFunction = (context: CanvasRenderingContext2D, frameCount: number) => {\r\n    context.fillStyle = fillColour;\r\n\r\n    const drawingHeight = height * props.drawingHeightProportion;\r\n    const startingY = (height - drawingHeight) / 2\r\n\r\n    const drawingWidth = width * props.drawingWidthProportion;\r\n    const stripWidth = drawingWidth / length;\r\n    const barWidth = stripWidth * (props.barProportion);\r\n    const startingX = (width - drawingWidth + stripWidth - barWidth) / 2;\r\n\r\n    for (let x = 0; x < length; x++) {\r\n      const xCoord = startingX + (x * stripWidth);\r\n\r\n      context.fillRect(\r\n        xCoord, startingY, barWidth, drawingHeight * props.array[x] / length\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Canvas\r\n      width={ width }\r\n      height={ height }\r\n      background={ props.background ?? '#fff' }\r\n      drawFunction={ drawFunction }\r\n    />\r\n  )\r\n}\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { Column } from '../common/Column'\r\nimport { Row } from '../common/Row'\r\nimport { Spacer } from '../common/Spacer'\r\nimport { Body } from '../common/Text'\r\nimport { useComponentSize } from '../common/useComponentSize'\r\nimport { Card } from '../components/Card'\r\nimport { SortingCanvas } from './SortingCanvas'\r\nimport { getSortingAlgorithm,\r\n  getSortingAlgorithmColour,\r\n  getSortingAlgorithmName,\r\n  getSortingAlgorithmPath,\r\n  SortingAlgorithmEnum } from './algorithmEnum'\r\nimport { SortingType } from './sort'\r\nimport { useHistory } from 'react-router'\r\n\r\nimport '../styles/Text.scss'\r\n\r\ninterface DemoCardProps {\r\n  algorithm: SortingAlgorithmEnum;\r\n  array: SortingType[];\r\n  interval?: number;\r\n  resetInterval?: number;\r\n  title?: string;\r\n}\r\n\r\nexport const DemoCard = (props: DemoCardProps) => {\r\n  const history = useHistory();\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const defaultRunning = false;\r\n  const defaultStateIndex = 0;\r\n\r\n  const { width, height } = useComponentSize(containerRef);\r\n  const [running, setRunning] = useState(defaultRunning);\r\n  const [stateIndex, setStateIndex] = useState(defaultStateIndex);\r\n  const sortingStates = getSortingAlgorithm(props.algorithm)(props.array);\r\n\r\n  const resetHooks = useCallback(() => {\r\n    setRunning(defaultRunning);\r\n    setStateIndex(defaultStateIndex);\r\n  }, [defaultRunning])\r\n\r\n  useEffect(() => {\r\n    const id = setInterval(() => {\r\n      if (running) {\r\n        const nextIndex = stateIndex + 1;\r\n\r\n        if (nextIndex < sortingStates.length) \r\n          setStateIndex(nextIndex)\r\n        else {\r\n          setRunning(false);\r\n          setTimeout(() => {\r\n            resetHooks();\r\n            setRunning(false);\r\n          }, props.resetInterval ?? 1000)\r\n        }\r\n      }\r\n    }, props.interval ?? 250)\r\n\r\n    return () => clearInterval(id);\r\n\r\n  }, [props.interval, props.resetInterval, running, sortingStates.length, stateIndex, resetHooks])\r\n\r\n  return (\r\n    <div\r\n      ref={ containerRef }\r\n      onMouseEnter={ () => setRunning(true) }\r\n      onClick={ () => {\r\n        const path = getSortingAlgorithmPath(props.algorithm);\r\n\r\n        history.push(path)\r\n      } }\r\n    >\r\n      <Card>\r\n        <Column>\r\n          <Body className='text-align-center'>\r\n            { props.title ?? getSortingAlgorithmName(props.algorithm) }\r\n          </Body>\r\n          <Row>\r\n            <Spacer/>\r\n            <SortingCanvas\r\n              width={ width * 0.8 }\r\n              height={ 200 }\r\n              drawingWidthProportion={ 0.8 }\r\n              drawingHeightProportion={ 0.8 }\r\n              barProportion={ 0.8 }\r\n              array={ sortingStates[stateIndex] }\r\n              fillColour={ getSortingAlgorithmColour(props.algorithm) }\r\n            />\r\n            <Spacer/>\r\n          </Row>\r\n        </Column>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n","import { shuffleArray } from \"./shuffle\";\r\n\r\nexport const randomArray = (length: number) => {\r\n  const arr = [];\r\n\r\n  for (let i = 1; i <= length; i++)\r\n    arr.push(i);\r\n\r\n  shuffleArray(arr);\r\n\r\n  return arr;\r\n}","/**\r\n * Shuffles the array in-place.\r\n * @param array The array to shuffle.\r\n */\r\nexport const shuffleArray = (array: number[]) => {\r\n  let currentIndex = array.length;\r\n\r\n  while (currentIndex !== 0) {\r\n    let randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\r\n  }\r\n}","import React from 'react'\r\nimport FadeIn from 'react-fade-in';\r\nimport { Body, Title } from './common/Text';\r\nimport { Grid } from './components/Grid';\r\nimport { PageTextPadding } from './PageTextPadding';\r\nimport { SortingAlgorithmEnum } from './sorting/algorithmEnum';\r\nimport { DemoCard } from './sorting/DemoCard';\r\nimport { randomArray } from './util/randomArray';\r\n\r\ninterface CardPageProps {\r\n  arrayLength?: number;\r\n  title: string;\r\n  body: string;\r\n}\r\n\r\nexport const CardPage = (props: CardPageProps) => {\r\n  const arrayLength = props.arrayLength ?? 16;\r\n\r\n  return (\r\n    <FadeIn>\r\n      <PageTextPadding className='text-align-center' bottom={ false }>\r\n        <Title>\r\n          { props.title }\r\n        </Title>\r\n      </PageTextPadding>\r\n      <PageTextPadding className='text-align-center' top={ false } bottom={ false }>\r\n        <Body\r\n          style={{ whiteSpace: 'pre-line' }}\r\n        >\r\n          { props.body }\r\n        </Body>\r\n      </PageTextPadding>\r\n      <Grid>\r\n        <DemoCard\r\n          algorithm={ SortingAlgorithmEnum.Quicksort }\r\n          array={ randomArray(arrayLength) }\r\n        />\r\n        <DemoCard\r\n          algorithm={ SortingAlgorithmEnum.Mergesort }\r\n          array={ randomArray(arrayLength) }\r\n        />\r\n        <DemoCard\r\n          algorithm={ SortingAlgorithmEnum.Heapsort }\r\n          array={ randomArray(arrayLength) }\r\n        />\r\n      </Grid>\r\n    </FadeIn>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { CardPage } from './CardPage';\r\n\r\nexport const AboutPage = () => {\r\n  return (\r\n    <CardPage\r\n      title='About'\r\n      body={\r\n        `This project was built with intent of visually demonstrating sorting algorithms.\r\n\r\n        These algorithms each have their uses, and visualisations can be highly informative.\r\n\r\n        I hope you find this project educational and explanatory.`\r\n      }\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { BasicProps, HasChildren } from '../common/basicProps';\r\n\r\nimport './Anchor.scss'\r\n\r\ninterface AnchorProps extends BasicProps, HasChildren {\r\n  route: string;\r\n  color?: boolean;\r\n  action?: () => void;\r\n}\r\n\r\nexport const Anchor = (props: AnchorProps) => {\r\n  const history = useHistory();\r\n\r\n  const style = { ...props.style }\r\n  const className = 'hover-cursor-pointer ' +\r\n    (props.color === false ?\r\n      props.className : 'anchor-text ') + props.className ?? '';\r\n\r\n  return (\r\n    <div\r\n      style={ style }\r\n      className={ className }\r\n      onClick={ () => {\r\n        if (props.action !== undefined)\r\n          props.action();\r\n\r\n        history.push(props.route)\r\n      }}\r\n    >\r\n      { props.children }\r\n    </div>\r\n  )\r\n}\r\n","/**\r\n * Horrific workaround because export namespaces don't want to work with babel.\r\n * \r\n * Possibly helpful links:\r\n * https://stackoverflow.com/questions/58783699/namespace-not-marked-type-only-declare-babel-typescript\r\n * https://github.com/tensorflow/tfjs/issues/2400\r\n * https://babeljs.io/docs/en/babel-plugin-transform-typescript\r\n */\r\n\r\nconst home = '/';\r\nconst about = '/about';\r\n\r\nexport const Routes = {\r\n  home: home,\r\n  about: about\r\n}\r\n","import React from 'react'\r\nimport { Column } from '../common/Column'\r\nimport { Row } from '../common/Row'\r\nimport { Spacer } from '../common/Spacer'\r\nimport { Anchor } from './Anchor'\r\nimport { Routes } from '../routes'\r\n\r\nimport '../styles/Unselectable.scss'\r\nimport '../styles/Responsive.scss'\r\nimport '../styles/Text.scss'\r\nimport './Bar.scss'\r\n\r\nexport const Footer = () => {\r\n  const mainFlex = 10;\r\n\r\n  const HomeRoute = () =>\r\n    <Anchor route={ Routes.home }>\r\n      Home\r\n    </Anchor>\r\n\r\n  const AboutRoute = () =>\r\n    <Anchor route={ Routes.about }>\r\n      About\r\n    </Anchor>\r\n\r\n  const Copyright = () =>\r\n    <div>Copyright © 2021</div>\r\n\r\n  // TODO: make responsive\r\n  return (\r\n    <div className='unselectable'>\r\n      <div className='responsive-hide-children-small'>\r\n        <Column className='bar-container-fixed-height'>\r\n          <Spacer/>\r\n          <Row>\r\n            <Spacer flex={ mainFlex }/>\r\n            <HomeRoute/>\r\n            <Spacer/>\r\n            <AboutRoute/>\r\n            <Spacer/>\r\n            <Copyright/>\r\n            <Spacer flex={ mainFlex }/>\r\n          </Row>\r\n          <Spacer/>\r\n        </Column>\r\n      </div>\r\n      <div className='responsive-hide-children-large'>\r\n        <Column className='bar-container'>\r\n          <Row style={{ marginTop: '1rem', marginBottom: '1rem' }}>\r\n            <Spacer/>\r\n            <HomeRoute/>\r\n            <Spacer/>\r\n          </Row>\r\n          <Row>\r\n            <Spacer/>\r\n            <AboutRoute/>\r\n            <Spacer/>\r\n          </Row>\r\n          <Row style={{ marginTop: '1rem', marginBottom: '1rem' }}>\r\n            <Spacer/>\r\n            <Copyright/>\r\n            <Spacer/>\r\n          </Row>\r\n        </Column>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Column } from '../common/Column'\r\nimport { Row } from '../common/Row'\r\nimport { Spacer } from '../common/Spacer'\r\nimport { Anchor } from './Anchor'\r\nimport { Routes } from '../routes'\r\n\r\nimport '../styles/Unselectable.scss'\r\nimport '../styles/Hover.scss'\r\nimport '../styles/Text.scss'\r\nimport './Bar.scss'\r\n\r\nexport const Header = () => \r\n  <Column className='unselectable bar-container-fixed-height'>\r\n    <Spacer/>\r\n    <Row>\r\n      <Spacer/>\r\n      <Anchor className='text-large3 hover-cursor-pointer' color={ false } route={ Routes.home }>\r\n        Sorting Visualiser\r\n      </Anchor>\r\n      <Spacer/>\r\n    </Row>\r\n    <Spacer/>\r\n  </Column>\r\n","import React from 'react'\r\nimport FadeIn from 'react-fade-in'\r\nimport { PageTextPadding } from './PageTextPadding'\r\n\r\nimport './styles/Text.scss'\r\n\r\nexport const DefaultPage = () => {\r\n  return (\r\n    <PageTextPadding>\r\n      <div className='text-align-center'>\r\n        <FadeIn>\r\n          <div className='text-vlarge'>404</div>\r\n          <div>This isn't the page you were looking for.</div>\r\n        </FadeIn>\r\n      </div>\r\n    </PageTextPadding>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { BasicProps } from '../common/basicProps'\r\nimport { Column } from '../common/Column'\r\nimport { Row } from '../common/Row'\r\nimport { Spacer } from '../common/Spacer'\r\nimport { Body, Subtitle } from '../common/Text'\r\nimport { Routes } from '../routes'\r\nimport { Anchor } from './Anchor'\r\n\r\nimport '../styles/Unselectable.scss'\r\nimport './SelectionPanel.scss'\r\n\r\nexport type SelectionPanelOption = { text: string, path: string }\r\n\r\ninterface OptionListProps {\r\n  members: SelectionPanelOption[];\r\n  selectedIndex: number;\r\n}\r\n\r\ninterface SelectionPanelProps extends BasicProps, OptionListProps {\r\n  title?: string;\r\n  setRunning: (b: boolean) => void;\r\n}\r\n\r\nexport const SelectionPanel = (props: SelectionPanelProps) => {\r\n  const options: JSX.Element[] = [];\r\n\r\n  let keys = 0;\r\n\r\n  for (let i = 0; i < props.members.length; i++) {\r\n    const value = props.members[i];\r\n\r\n    if (i !== 0)\r\n      options.push(<Spacer key={ keys++ }/>);\r\n\r\n    options.push(\r\n      <Column className='unselectable' key={ keys++ }>\r\n        <Spacer/>\r\n        <Body className='selection-panel-padding'>\r\n          {\r\n            i === props.selectedIndex ?\r\n              <div className='selection-panel-selected'>\r\n                { value.text }\r\n              </div>  :\r\n              <Anchor\r\n                action={ () => props.setRunning(false) }\r\n                route={ value.path }\r\n              >\r\n                { value.text }\r\n              </Anchor>\r\n          }\r\n        </Body>\r\n        <Spacer/>\r\n      </Column>\r\n    )\r\n  }\r\n  \r\n  return (\r\n    <div className={ props.className } style={ props.style }>\r\n      <Row>\r\n        <Column className='responsive-hide-children-small'>\r\n          <Spacer/>\r\n          <Subtitle className='selection-panel-padding-sides'>\r\n            <Anchor route={ Routes.home }\r\n              color={ false }>\r\n              { props.title }\r\n            </Anchor>\r\n          </Subtitle>\r\n          <Spacer/>\r\n        </Column>\r\n        <Spacer className='responsive-hide-small' flex={ 2 }/>\r\n        { options }\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport FadeIn from 'react-fade-in'\r\nimport { Body, Subtitle, Title } from '../common/Text'\r\nimport { SelectionPanel } from '../components/SelectionPanel'\r\nimport { getSortingAlgorithmPath,\r\n  getSortingAlgorithmName,\r\n  SortingAlgorithmEnum,\r\n  getSortingAlgorithmDescription,\r\n  getSortingAlgorithm } from './algorithmEnum'\r\n\r\nimport { PageTextPadding } from '../PageTextPadding'\r\nimport { SortingCanvas } from './SortingCanvas'\r\nimport { Spacer } from '../common/Spacer'\r\nimport { HasSize } from '../common/hasSize'\r\nimport { Row } from '../common/Row'\r\nimport { SortingType } from './sort'\r\n\r\nimport '../styles/Text.scss'\r\nimport '../styles/Hover.scss'\r\nimport '../styles/Button.scss'\r\nimport '../styles/Unselectable.scss'\r\nimport './SortAlgoPageTemplate.scss'\r\n\r\ninterface SortAlgoPageTemplateProps extends HasSize {\r\n  algorithm: SortingAlgorithmEnum;\r\n  array: SortingType[];\r\n  setArray: (array: SortingType[]) => void;\r\n  resetArray: () => void;\r\n\r\n  running: boolean;\r\n  setRunning: (t: boolean) => void;\r\n\r\n  interval?: number;\r\n}\r\n\r\nexport const SortAlgoPageTemplate = (props: SortAlgoPageTemplateProps) => {\r\n  const members = [];\r\n\r\n  const defaultRunning = false;\r\n  const defaultSortingComplete = false;\r\n  const defaultSortingStateIndex = 0;\r\n  const defaultSortingStates: SortingType[][] = useMemo(() => [], [])\r\n\r\n  const [sortingComplete, setSortingComplete] = useState(defaultSortingComplete);\r\n  const [sortingStateIndex, setSortingStateIndex] = useState(defaultSortingStateIndex);\r\n  const [sortingStates, setSortingStates] = useState<SortingType[][]>(defaultSortingStates);\r\n\r\n  for (let i = 0; i < SortingAlgorithmEnum.NumAlgorithms; i++) {\r\n    members.push({\r\n      text: getSortingAlgorithmName(i),\r\n      path: getSortingAlgorithmPath(i)\r\n    })\r\n  }\r\n\r\n  const setRunning = props.setRunning;\r\n\r\n  const resetHooks = useCallback(() => {\r\n    setRunning(defaultRunning);\r\n    setSortingComplete(defaultSortingComplete);\r\n    setSortingStateIndex(defaultSortingStateIndex);\r\n    setSortingStates(defaultSortingStates);\r\n  }, [defaultRunning, defaultSortingComplete, defaultSortingStates, setRunning])\r\n\r\n  const sort = useCallback(() => {\r\n    const sortingAlgorithm = getSortingAlgorithm(props.algorithm);\r\n\r\n    const result = sortingAlgorithm(props.array);\r\n\r\n    setSortingStates(result);\r\n    setSortingStateIndex(0);\r\n    setSortingComplete(true);\r\n\r\n  }, [props.array, props.algorithm])\r\n\r\n  const createNewArray = () => {\r\n    props.resetArray();\r\n    resetHooks();\r\n  }\r\n\r\n  /* Reset all hooks when this changes. */\r\n  useEffect(() => {\r\n    resetHooks();\r\n  }, [props.algorithm, resetHooks])\r\n\r\n  /* Start sorting animation. */\r\n  useEffect(() => {\r\n    const id = setInterval(() => {\r\n      if (props.running) {\r\n        const newIndex = sortingStateIndex + 1;\r\n\r\n        if (newIndex < sortingStates.length) {\r\n          setSortingStateIndex(newIndex);\r\n          props.setArray(sortingStates[newIndex]);\r\n        }\r\n        else {\r\n          props.setRunning(false);\r\n          resetHooks();\r\n        }\r\n      }\r\n    }, props.interval ?? 20)\r\n\r\n    return () => clearInterval(id);\r\n  }, [props, resetHooks, props.running, sortingStateIndex, sortingStates])\r\n\r\n  /* Perform sorting compuation. */\r\n  useEffect(() => {\r\n    if (!sortingComplete)\r\n      sort();\r\n  }, [props.array, props.algorithm, sortingComplete, props.running, sort])\r\n\r\n  return (\r\n    <FadeIn>\r\n      <PageTextPadding bottom={ false }>\r\n        <Row className='unselectable'>\r\n          <Title>\r\n            { getSortingAlgorithmName(props.algorithm) }\r\n          </Title>\r\n          <Spacer/>\r\n          <button\r\n            className={\r\n              'hover-cursor-pointer sorting-template-button ' +\r\n                (props.running ? 'button-blue' : 'button-green')\r\n            }\r\n            onClick={ () => props.setRunning(!props.running) }\r\n          >\r\n            <Subtitle padBottom={ false }>\r\n            { props.running ? 'Pause' : 'Start' }\r\n            </Subtitle>\r\n          </button>\r\n          <button\r\n            className={\r\n              'hover-cursor-pointer sorting-template-button sorting-template-margin-left button-blue'\r\n            }\r\n            onClick={ () => createNewArray() }\r\n          >\r\n            <Subtitle padBottom={ false }>\r\n            New\r\n            </Subtitle>\r\n          </button>\r\n        </Row>\r\n      </PageTextPadding>\r\n      <SelectionPanel\r\n        setRunning={ props.setRunning }\r\n        title={ 'Sorting' }\r\n        members={ members }\r\n        selectedIndex={ props.algorithm }\r\n      />\r\n      <PageTextPadding top={ false } bottom={ false }>\r\n        <Body>\r\n          { getSortingAlgorithmDescription(props.algorithm) }\r\n        </Body>\r\n      </PageTextPadding>\r\n      <PageTextPadding>\r\n        <Row>\r\n          <Spacer/>\r\n          <SortingCanvas\r\n            maxHeight={500}\r\n            height={ props.height * 0.5 }\r\n            width={ props.width }\r\n            drawingWidthProportion={ 1 }\r\n            drawingHeightProportion={ 1 }\r\n            barProportion={ 0.8 }\r\n            array={ props.array }\r\n            // fillColour={ getSortingAlgorithmColour(props.algorithm) }\r\n          />\r\n          <Spacer/>\r\n        </Row>\r\n      </PageTextPadding>\r\n    </FadeIn>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { CardPage } from '../CardPage'\r\n\r\nexport const SortHomePage = () => {\r\n  return (\r\n    <CardPage\r\n      title='Sorting algorithms'\r\n      body={\r\n        `To order a sequence, we use sorting algorithms.\r\n        \r\n        Get started by chosing an algorithm.`\r\n      }\r\n    />\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport FadeIn from 'react-fade-in';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { HasSize } from '../common/hasSize';\r\nimport { DefaultPage } from '../DefaultPage';\r\nimport { Routes } from '../routes';\r\nimport { randomArray } from '../util/randomArray';\r\nimport { SortingAlgorithmEnum } from './algorithmEnum';\r\nimport { SortingRoutes } from './routes';\r\nimport { SortAlgoPageTemplate } from './SortAlgoPageTemplate';\r\nimport { SortHomePage } from './SortHomePage';\r\n\r\nexport const SortPage = (props: HasSize) => {\r\n  const arrayLength = 64;\r\n\r\n  const [array, setArray] = useState(randomArray(arrayLength));\r\n  const [running, setRunning] = useState(false);\r\n\r\n  return (\r\n    <FadeIn>\r\n      <Switch>\r\n        <Route exact path={ Routes.home }>\r\n          <SortHomePage/>\r\n        </Route>\r\n        <Route exact path={ SortingRoutes.quicksort }>\r\n          <SortAlgoPageTemplate\r\n            running={ running }\r\n            setRunning={ setRunning }\r\n            array={ array }\r\n            setArray={ setArray }\r\n            resetArray={ () => setArray(randomArray(arrayLength)) }\r\n            algorithm={ SortingAlgorithmEnum.Quicksort }\r\n            interval={ 40 }\r\n            { ...props }\r\n          />\r\n        </Route>\r\n        <Route exact path={ SortingRoutes.mergesort }>\r\n          <SortAlgoPageTemplate\r\n            running={ running }\r\n            setRunning={ setRunning }\r\n            array={ array }\r\n            setArray={ setArray }\r\n            resetArray={ () => setArray(randomArray(arrayLength)) }\r\n            algorithm={ SortingAlgorithmEnum.Mergesort }\r\n            interval={ 50 }\r\n            { ...props }\r\n          />\r\n        </Route>\r\n        <Route exact path={ SortingRoutes.heapsort }>\r\n          <SortAlgoPageTemplate\r\n            running={ running }\r\n            setRunning={ setRunning }\r\n            array={ array }\r\n            setArray={ setArray }\r\n            resetArray={ () => setArray(randomArray(arrayLength)) }\r\n            algorithm={ SortingAlgorithmEnum.Heapsort }\r\n            interval={ 20 }\r\n            { ...props }\r\n          />\r\n        </Route>\r\n        <Route path={'*'}>\r\n          <DefaultPage/>\r\n        </Route>\r\n      </Switch>\r\n    </FadeIn>\r\n  )\r\n}\r\n","import React, { useRef, useState } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { AboutPage } from './AboutPage';\nimport { Column } from './common/Column';\nimport { Row } from './common/Row';\nimport { Spacer } from './common/Spacer';\nimport { Footer } from './components/Footer';\nimport { Header } from './components/Header';\nimport { DefaultPage } from './DefaultPage';\nimport { Routes } from './routes';\nimport { SortPage } from './sorting/SortPage';\nimport { useComponentSize } from './common/useComponentSize';\n\nimport './App.scss'\nimport { randomArray } from './util/randomArray';\nimport { SortingRoutes } from './sorting/routes';\nimport { SortAlgoPageTemplate } from './sorting/SortAlgoPageTemplate';\nimport { SortingAlgorithmEnum } from './sorting/algorithmEnum';\n\nexport const App = () => {\n  const arrayLength = 64;\n\n  const [array, setArray] = useState(randomArray(arrayLength));\n  const [running, setRunning] = useState(false);\n\n  const pageBodyRef = useRef<HTMLDivElement>(null);\n  const sizeProps = useComponentSize(pageBodyRef);\n\n  const sortProps = {\n    ...sizeProps,\n    running: running,\n    array: array,\n    setRunning: setRunning,\n    setArray: setArray,\n    resetArray: () => setArray(randomArray(arrayLength)),\n    interval: 40\n  }\n\n  return (\n    <BrowserRouter>\n      <Column className='page-container'>\n        <Header/>\n        <Row style={{ flex: 1 }}>\n          <Spacer className='page-body-spacer'/>\n          <div ref={ pageBodyRef } className='page-body'>\n            <Switch>\n              <Route exact={ true } path={ Routes.home }>\n              <SortPage\n                { ...sizeProps }\n              />\n              </Route>\n              <Route exact path={ SortingRoutes.quicksort }>\n                <SortAlgoPageTemplate\n                  { ...sortProps }\n                  algorithm={ SortingAlgorithmEnum.Quicksort }\n                />\n              </Route>\n              <Route exact path={ SortingRoutes.mergesort }>\n                <SortAlgoPageTemplate\n                  { ...sortProps }\n                  algorithm={ SortingAlgorithmEnum.Mergesort }\n                />\n              </Route>\n              <Route exact path={ SortingRoutes.heapsort }>\n                <SortAlgoPageTemplate\n                  { ...sortProps }\n                  algorithm={ SortingAlgorithmEnum.Heapsort }\n                />\n              </Route>\n              <Route exact={ true } path={ Routes.about } component={ AboutPage }/>\n              <Route exact={ true } path={ '*' } component={ DefaultPage } />\n            </Switch>\n          </div>\n          <Spacer className='page-body-spacer'/>\n        </Row>\n        <Footer/>\n      </Column>\n    </BrowserRouter>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}